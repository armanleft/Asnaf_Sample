//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AsnafBranches
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sis-eg.com/ws", ConfigurationName="AsnafBranches.WebPortType")]
    public interface WebPortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="branchIssuance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<string> branchIssuanceAsync(
                    string password, 
                    string companyId, 
                    string province, 
                    string city, 
                    string managerName, 
                    string mobile, 
                    string nationalId, 
                    string postalCode, 
                    string address, 
                    string nationalCardCopyFileName, 
                    string identificationCopyFileName, 
                    string obligationFormFileName, 
                    string establishFormFileName, 
                    string rentalContractFileName, 
                    string officialNewspaperFileName, 
                    string nationalCardCopy, 
                    string identificationCopy, 
                    string obligationForm, 
                    string establishForm, 
                    string rentalContract, 
                    string officialNewspaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="changeManager", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<string> changeManagerAsync(string password, string companyId, string branchCode, string managerName, string managerNationalCode, string managerMobile, string nationalCardCopyFileName, string identificationCopyFileName, string establishFormFileName, string nationalCardCopy, string identificationCopy, string establishForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="changeAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<string> changeAddressAsync(string password, string companyId, string branchCode, string postalCode, string address, string changeAddressFormFileName, string rentalContractFileName, string officialNewspaperFileName, string changeAddressForm, string rentalContract, string officialNewspaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="cancelBranch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<string> cancelBranchAsync(string password, string companyId, string branchCode, string cancelFormFileName, string cancelForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="getProvinceCityList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<string> getProvinceCityListAsync(string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface WebPortTypeChannel : AsnafBranches.WebPortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class WebPortTypeClient : System.ServiceModel.ClientBase<AsnafBranches.WebPortType>, AsnafBranches.WebPortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WebPortTypeClient() : 
                base(WebPortTypeClient.GetDefaultBinding(), WebPortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WebPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebPortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(WebPortTypeClient.GetBindingForEndpoint(endpointConfiguration), WebPortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebPortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WebPortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebPortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WebPortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> branchIssuanceAsync(
                    string password, 
                    string companyId, 
                    string province, 
                    string city, 
                    string managerName, 
                    string mobile, 
                    string nationalId, 
                    string postalCode, 
                    string address, 
                    string nationalCardCopyFileName, 
                    string identificationCopyFileName, 
                    string obligationFormFileName, 
                    string establishFormFileName, 
                    string rentalContractFileName, 
                    string officialNewspaperFileName, 
                    string nationalCardCopy, 
                    string identificationCopy, 
                    string obligationForm, 
                    string establishForm, 
                    string rentalContract, 
                    string officialNewspaper)
        {
            return base.Channel.branchIssuanceAsync(password, companyId, province, city, managerName, mobile, nationalId, postalCode, address, nationalCardCopyFileName, identificationCopyFileName, obligationFormFileName, establishFormFileName, rentalContractFileName, officialNewspaperFileName, nationalCardCopy, identificationCopy, obligationForm, establishForm, rentalContract, officialNewspaper);
        }
        
        public System.Threading.Tasks.Task<string> changeManagerAsync(string password, string companyId, string branchCode, string managerName, string managerNationalCode, string managerMobile, string nationalCardCopyFileName, string identificationCopyFileName, string establishFormFileName, string nationalCardCopy, string identificationCopy, string establishForm)
        {
            return base.Channel.changeManagerAsync(password, companyId, branchCode, managerName, managerNationalCode, managerMobile, nationalCardCopyFileName, identificationCopyFileName, establishFormFileName, nationalCardCopy, identificationCopy, establishForm);
        }
        
        public System.Threading.Tasks.Task<string> changeAddressAsync(string password, string companyId, string branchCode, string postalCode, string address, string changeAddressFormFileName, string rentalContractFileName, string officialNewspaperFileName, string changeAddressForm, string rentalContract, string officialNewspaper)
        {
            return base.Channel.changeAddressAsync(password, companyId, branchCode, postalCode, address, changeAddressFormFileName, rentalContractFileName, officialNewspaperFileName, changeAddressForm, rentalContract, officialNewspaper);
        }
        
        public System.Threading.Tasks.Task<string> cancelBranchAsync(string password, string companyId, string branchCode, string cancelFormFileName, string cancelForm)
        {
            return base.Channel.cancelBranchAsync(password, companyId, branchCode, cancelFormFileName, cancelForm);
        }
        
        public System.Threading.Tasks.Task<string> getProvinceCityListAsync(string password)
        {
            return base.Channel.getProvinceCityListAsync(password);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebPort))
            {
                return new System.ServiceModel.EndpointAddress("https://easnaf.mimt.gov.ir/fa/index.php?module=cdk&func=loadmodule&system=cdk&sis" +
                        "module=user/call_function.php&ctp_id=62&func_name=wsrvTypeServerFunction&type_na" +
                        "me=mim_branch_issuance_change");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WebPortTypeClient.GetBindingForEndpoint(EndpointConfiguration.WebPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WebPortTypeClient.GetEndpointAddress(EndpointConfiguration.WebPort);
        }
        
        public enum EndpointConfiguration
        {
            
            WebPort,
        }
    }
}
